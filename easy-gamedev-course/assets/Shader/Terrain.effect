// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      depthStencilState:
        depthTest: true
        depthWrite: true
      properties:
        texture: { value: black }
        normaltexture: { value: white }
        textureparam: { value: [0.01, 0.01, 1, 1] }
        layertexture: { value: black }
        noise: { value: black }
        terrainparam: { value: [0.0, 0, 0, 0] }
        fogcolor: { value: [1,1,1,1], editor: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec2 a_uv0;
  out vec2 v_uv0;
  out vec3 v_normal;
  out vec4 v_data;
  out vec4 v_worldpos;
  out vec4 v_vspos;

  uniform UNLIT {
    vec4 textureparam;
    vec4 terrainparam;
  };
  uniform sampler2D texture;

  void main () {

    float heightbase = texture2D(texture,   a_uv0 + vec2(0,0)).r;
    // float heightbase_u = texture2D(texture, a_uv0 + vec2(0,textureparam.y)).r;
    // float heightbase_d = texture2D(texture, a_uv0 + vec2(0,-textureparam.y)).r;
    // float heightbase_r = texture2D(texture, a_uv0 + vec2(textureparam.x,0)).r;
    // float heightbase_l = texture2D(texture, a_uv0 + vec2(-textureparam.x,0)).r;

    vec3 origin = a_position + vec3(0.0,heightbase *    terrainparam.x,0.0);
    // vec3 u =      a_position + vec3(0.0,heightbase_u *  terrainparam.x,-textureparam.w) - origin;
    // vec3 d =      a_position + vec3(0.0,heightbase_d *  terrainparam.x,textureparam.w) - origin;
    // vec3 r =      a_position + vec3(textureparam.z,heightbase_r * terrainparam.x,0.0) - origin;
    // vec3 l =      a_position + vec3(-textureparam.z,heightbase_l * terrainparam.x,0.0) - origin;

    // vec3 n1 = cross(l,u);
    // vec3 n2 = cross(u,r);
    // vec3 n3 = cross(r,d);
    // vec3 n4 = cross(d,l);

    vec4 pos = vec4(origin,1.0);
    v_worldpos =  cc_matWorld * pos;
    //v_normal = normalize(n1 + n2 + n3 + n4);
    v_uv0 = a_uv0;
    v_data = vec4(heightbase,0.5,heightbase,heightbase);

    v_vspos = cc_matView * cc_matWorld * pos;

    gl_Position = cc_matViewProj * cc_matWorld * pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <cc-global>

  in vec2 v_uv0;
  in vec3 v_normal;
  in vec4 v_data;
  in vec4 v_worldpos;
  in vec4 v_vspos;

  uniform UNLITPS {
    vec4 fogcolor;
  };

  uniform sampler2D texture;
  uniform sampler2D layertexture;
  uniform sampler2D normaltexture;
  uniform sampler2D noise;

  float noise3d( in vec3 x )
  {
      vec3 p = floor(x);
      vec3 f = fract(x);
      f = f*f*(3.0-2.0*f);
      vec2 uv = (p.xy+vec2(37.0,239.0)*p.z) + f.xy;
      vec2 rg = texture2D(noise,(uv+0.5)/256.0,0.0).yx;
      return -1.0+2.0*mix( rg.x, rg.y, f.z );
  }
  float noise3dfbm5( in vec3 p )
  {
    vec3 q = p;
    float f;
    f  = 0.50000*noise3d( q ); q = q*2.02;
    f += 0.25000*noise3d( q ); q = q*2.03;
    f += 0.12500*noise3d( q ); q = q*2.01;
    f += 0.06250*noise3d( q ); q = q*2.02;
    f += 0.03125*noise3d( q );
    return clamp( 1.75*f, 0.0, 1.0 );
  }
  float noise3dfbm3( in vec3 p )
  {
    vec3 q = p;
    float f;
      f  = 0.50000*noise3d( q ); q = q*2.02;
      f += 0.25000*noise3d( q ); q = q*2.03;
      f += 0.12500*noise3d( q );
    return clamp( 1.75*f, 0.0, 1.0 );
  }
  float noise3dfbm2( in vec3 p )
  {
    vec3 q = p;
    float f;
      f  = 0.50000*noise3d( q ); q = q*2.02;
      f += 0.25000*noise3d( q );;
    return clamp( 1.75*f, 0.0, 1.0 );
  }

  vec4 ColorRamp2Exp(float factor, float power, float pos0, float pos1, vec4 color0, vec4 color1){
      vec4 outColor = color0;
      if(factor >= pos0 && factor < pos1)
      {
          float localFactor = (factor - pos0)/(pos1 - pos0);
          outColor =  mix(color0, color1, pow(localFactor, power));
      }
      else if (factor > pos1)
      {
          outColor = color1;
      }
      return outColor;
  }

  vec3 combineNormals2(vec3 n0, vec3 n1) {
	  n0  = vec3(n0.xz * n1.y + n1.xz * n0.y, n0.y * n1.y);    
    return normalize(n0);
  }

  void main () {
    vec4 data = texture2D(texture, v_uv0);
    vec4 normalPS = texture2D(normaltexture, v_uv0);

    float scale = 40.0;
    float x0 = noise3d((v_worldpos.xyz + vec3(1,0,0))*  scale);
    float x1 = noise3d((v_worldpos.xyz + vec3(-1,0,0))* scale);
    float y0 = noise3d((v_worldpos.xyz + vec3(0,0,1))*  scale);
    float y1 = noise3d((v_worldpos.xyz + vec3(0,0,-1))* scale);
    
    //NOTE: Controls the "smoothness"
    float s = 10.0;
    vec3 n = normalize(vec3(x1 - x0, s, y1 - y0));

    normalPS.xyz = normalPS.xyz * 2.0 - 1.0;
    normalPS.xyz = normalize(normalPS.xyz + n);

    // use noise to tweak the heightdata
    float noisedata = noise3dfbm3(v_worldpos.xyz*0.1);


    vec3 albedo = texture2D(layertexture, v_data.xy + vec2((noisedata - 0.5) * 0.5 * max(0.0, v_data.x - 0.5))).rgb;
    vec3 normal = -(normalPS.xyz);
    vec3 lightcolor = normalize(vec3(1.0,-0.25,0.0));
    float ndotl = max(0.0, dot(normal, lightcolor));
    vec3 light = mix( vec3(0.02,0.03,0.1), vec3(0.3,0.4,0.9), data.g * data.g) + vec3(1.0,0.95,0.7) * 2.0 * ndotl * min(data.b, data.a);

    vec4 final = vec4(1,1,1,1);
    final.rgb = light * albedo * albedo;


    // fog
    float linearZ = v_worldpos.y * 0.004;
    float linearDepth = length(v_worldpos.xyz - cc_cameraPos.xyz) / 1200.0;
    vec4 heightFog = ColorRamp2Exp(linearZ, 0.2, 0.0, 0.6, vec4(1,1,1,1), vec4(0));
    vec4 distFog = ColorRamp2Exp(linearDepth, 2.0, 0.0, 0.5, vec4(0), vec4(1));
    distFog *= min(vec4(1), heightFog * 5.0);

    final.rgb = mix(final.rgb, fogcolor.rgb * fogcolor.rgb, distFog.rgb * fogcolor.a);

    final.rgb *= 0.5;
    final.rgb = sqrt(final.rgb);    

    final.a = -v_vspos.z / 500.0;
    //final.rgb = sqrt(light * 0.25);
    //final.rgb = data.ggg * data.ggg;
    //final.rgb = n * 0.5 + 0.5;
    //final.rgb = vec3(noisedata);
    gl_FragColor = final;
  }
}%
